From 68cc220e385eee2f18d2adc6d0e269137844b0f0 Mon Sep 17 00:00:00 2001
From: Fabian Mauchle <fabian.mauchle@switch.ch>
Date: Wed, 30 May 2018 15:58:02 +0200
Subject: [PATCH] fix openssl 1.1 dtls compile issues make gcc 6.x happy

---
 dtls.c        |   4 ++
 radsecproxy.c |   8 +--
 tcp.c         |  22 +++----
 tlscommon.c   |   7 ++-
 udp.c         | 180 +++++++++++++++++++++++++++++-----------------------------
 5 files changed, 115 insertions(+), 106 deletions(-)

diff --git a/dtls.c b/dtls.c
index 6191077..e7c3492 100644
--- a/dtls.c
+++ b/dtls.c
@@ -464,7 +464,11 @@ void *dtlslistener(void *arg) {
             BIO_set_fd(SSL_get_rbio(conf->tlsconf->dtlssslprep), s, BIO_NOCLOSE);
         }
 
+#if OPENSSL_VERSION_NUMBER < 0x10100000
         if(DTLSv1_listen(conf->tlsconf->dtlssslprep, &from) > 0) {
+#else
+        if(DTLSv1_listen(conf->tlsconf->dtlssslprep, (BIO_ADDR *)&from) > 0) {
+#endif
             params = malloc(sizeof(struct dtlsservernewparams));
             memcpy(&params->addr, &from, sizeof(from));
             memcpy(&params->bind, &to, sizeof(to));
diff --git a/radsecproxy.c b/radsecproxy.c
index 40a9f1f..b051811 100644
--- a/radsecproxy.c
+++ b/radsecproxy.c
@@ -199,10 +199,10 @@ struct client *addclient(struct clsrvconf *conf, uint8_t lock) {
 
     new = calloc(1, sizeof(struct client));
     if (!new) {
-	debug(DBG_ERR, "malloc failed");
-    if (lock)
-        pthread_mutex_unlock(conf->lock);
-	return NULL;
+        debug(DBG_ERR, "malloc failed");
+        if (lock)
+            pthread_mutex_unlock(conf->lock);
+        return NULL;
     }
     if (!list_push(conf->clients, new)) {
         free(new);
diff --git a/tcp.c b/tcp.c
index 908931f..c5bd51b 100644
--- a/tcp.c
+++ b/tcp.c
@@ -341,18 +341,18 @@ void *tcpservernew(void *arg) {
 
     conf = find_clconf(handle, (struct sockaddr *)&from, NULL);
     if (conf) {
-	client = addclient(conf, 1);
-	if (client) {
-        if(conf->keepalive)
-            enable_keepalive(s);
-	    client->sock = s;
-	    client->addr = addr_copy((struct sockaddr *)&from);
-	    tcpserverrd(client);
-	    removeclient(client);
-	} else
-	    debug(DBG_WARN, "tcpservernew: failed to create new client instance");
+        client = addclient(conf, 1);
+        if (client) {
+            if(conf->keepalive)
+                enable_keepalive(s);
+            client->sock = s;
+            client->addr = addr_copy((struct sockaddr *)&from);
+            tcpserverrd(client);
+            removeclient(client);
+        } else
+            debug(DBG_WARN, "tcpservernew: failed to create new client instance");
     } else
-	debug(DBG_WARN, "tcpservernew: ignoring request, no matching TCP client");
+        debug(DBG_WARN, "tcpservernew: ignoring request, no matching TCP client");
 
 exit:
     shutdown(s, SHUT_RDWR);
diff --git a/tlscommon.c b/tlscommon.c
index 1310552..6a90d0f 100644
--- a/tlscommon.c
+++ b/tlscommon.c
@@ -173,7 +173,8 @@ static int cookie_generate_cb(SSL *ssl, unsigned char *cookie, unsigned int *coo
         cookie_secret_initialized = 1;
     }
 
-    BIO_dgram_get_peer(SSL_get_rbio(ssl), &peer);
+    if(BIO_dgram_get_peer(SSL_get_rbio(ssl), &peer) < 0)
+        return 0;
     gettimeofday(&now, NULL);
     if (!cookie_calculate_hash((struct sockaddr *)&peer, now.tv_sec, result, &resultlength))
         return 0;
@@ -185,7 +186,11 @@ static int cookie_generate_cb(SSL *ssl, unsigned char *cookie, unsigned int *coo
     return 1;
 }
 
+#if OPENSSL_VERSION_NUMBER < 0x10100000
 static int cookie_verify_cb(SSL *ssl, unsigned char *cookie, unsigned int cookie_len) {
+#else
+static int cookie_verify_cb(SSL *ssl, const unsigned char *cookie, unsigned int cookie_len) {
+#endif
     struct sockaddr_storage peer;
     struct timeval now;
     time_t cookie_time;
diff --git a/udp.c b/udp.c
--- a/udp.c
+++ b/udp.c
@@ -165,16 +165,16 @@ unsigned char *radudpget(int s, struct c
 	len = RADLEN(buf);
 	if (len < 20) {
 	    debug(DBG_WARN, "radudpget: length too small");
-        if (recv(s, buf, 4, 0) == -1)
-            debug(DBG_ERR, "radudpget: recv failed - %s", strerror(errno));
+	    if (recv(s, buf, 4, 0) == -1)
+		debug(DBG_ERR, "radudpget: recv failed - %s", strerror(errno));
 	    continue;
 	}
 
 	rad = malloc(len);
 	if (!rad) {
 	    debug(DBG_ERR, "radudpget: malloc failed");
-        if (recv(s, buf, 4, 0) == -1)
-            debug(DBG_ERR, "radudpget: recv failed - %s", strerror(errno));
+	    if (recv(s, buf, 4, 0) == -1)
+		debug(DBG_ERR, "radudpget: recv failed - %s", strerror(errno));
 	    continue;
 	}
 
