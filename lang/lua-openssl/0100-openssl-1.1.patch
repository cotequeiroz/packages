--- a/src/asn1.c
+++ b/src/asn1.c
@@ -118,7 +118,11 @@ static int openssl_asn1type_new(lua_Stat
 static int openssl_asn1type_type(lua_State*L)
 {
   ASN1_TYPE* at = CHECK_OBJECT(1, ASN1_TYPE, "openssl.asn1_type");
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+  lua_pushinteger(L, ASN1_TYPE_get(at));
+#else
   lua_pushinteger(L, at->type);
+#endif
   return 1;
 }
 
@@ -325,15 +329,15 @@ static luaL_Reg asn1type_funcs[] =
 static int openssl_asn1object_nid(lua_State* L)
 {
   ASN1_OBJECT* o = CHECK_OBJECT(1, ASN1_OBJECT, "openssl.asn1_object");
-  lua_pushinteger(L, o->nid);
+  lua_pushinteger(L, OBJ_obj2nid(o));
   return 1;
 }
 
 static int openssl_asn1object_name(lua_State* L)
 {
   ASN1_OBJECT* o = CHECK_OBJECT(1, ASN1_OBJECT, "openssl.asn1_object");
-  lua_pushstring(L, o->sn);
-  lua_pushstring(L, o->ln);
+  lua_pushstring(L, OBJ_nid2sn(OBJ_obj2nid(o)));
+  lua_pushstring(L, OBJ_nid2ln(OBJ_obj2nid(o)));
   return 2;
 }
 
@@ -567,7 +571,7 @@ static int openssl_asn1group_set(lua_Sta
   ASN1_STRING *s = CHECK_GROUP(1, ASN1_STRING, "openssl.asn1group");
   int ret = 1;
 
-  switch (s->type)
+  switch (ASN1_STRING_type(s))
   {
   case V_ASN1_INTEGER:
   {
@@ -640,7 +644,7 @@ static time_t ASN1_TIME_get(ASN1_TIME* t
 static int openssl_asn1group_get(lua_State *L)
 {
   ASN1_STRING *s = CHECK_GROUP(1, ASN1_STRING, "openssl.asn1group");
-  switch (s->type)
+  switch (ASN1_STRING_type(s))
   {
   case V_ASN1_INTEGER:
   {
@@ -667,7 +671,7 @@ static int openssl_asn1group_get(lua_Sta
 static int openssl_asn1group_i2d(lua_State *L)
 {
   ASN1_STRING *s = CHECK_GROUP(1, ASN1_STRING, "openssl.asn1group");
-  switch (s->type)
+  switch (ASN1_STRING_type(s))
   {
   case V_ASN1_INTEGER:
   {
@@ -719,7 +723,7 @@ static int openssl_asn1group_i2d(lua_Sta
 static int openssl_asn1group_d2i(lua_State *L)
 {
   ASN1_STRING *s = CHECK_GROUP(1, ASN1_STRING, "openssl.asn1group");
-  switch (s->type)
+  switch (ASN1_STRING_type(s))
   {
   case V_ASN1_INTEGER:
   {
@@ -791,7 +795,7 @@ static int openssl_asn1group_data(lua_St
 {
   ASN1_STRING* s = CHECK_GROUP(1, ASN1_STRING, "openssl.asn1group");
   if (lua_isnone(L, 2))
-    lua_pushlstring(L, (const char*)ASN1_STRING_data(s), ASN1_STRING_length(s));
+    lua_pushlstring(L, (const char*)ASN1_STRING_get0_data(s), ASN1_STRING_length(s));
   else
   {
     size_t l;
@@ -806,7 +810,7 @@ static int openssl_asn1group_eq(lua_Stat
 {
   ASN1_STRING* s = CHECK_GROUP(1, ASN1_STRING, "openssl.asn1group");
   ASN1_STRING* ss = CHECK_GROUP(2, ASN1_STRING, "openssl.asn1group");
-  if (s->type == ss->type && ASN1_STRING_cmp(s, ss) == 0)
+  if (ASN1_STRING_type(s) == ASN1_STRING_type(ss) && ASN1_STRING_cmp(s, ss) == 0)
     lua_pushboolean(L, 1);
   else
     lua_pushboolean(L, 0);
@@ -816,7 +820,7 @@ static int openssl_asn1group_eq(lua_Stat
 static int openssl_asn1group_free(lua_State* L)
 {
   ASN1_STRING* s = CHECK_GROUP(1, ASN1_STRING, "openssl.asn1group");
-  switch (s->type)
+  switch (ASN1_STRING_type(s))
   {
   case V_ASN1_INTEGER:
     ASN1_INTEGER_free(s);
@@ -847,7 +851,7 @@ static int openssl_asn1group_tostring(lu
     case V_ASN1_INTEGER:
     case V_ASN1_BIT_STRING:
     {
-      BIGNUM *bn = BN_bin2bn((const unsigned char*)ASN1_STRING_data(s), ASN1_STRING_length(s), NULL);
+      BIGNUM *bn = BN_bin2bn(ASN1_STRING_get0_data(s), ASN1_STRING_length(s), NULL);
       char* str = BN_bn2hex(bn);
       lua_pushstring(L, str);
       BN_free(bn);
@@ -855,7 +859,7 @@ static int openssl_asn1group_tostring(lu
       return 1;
     }
     default:
-      lua_pushlstring(L, (const char*) ASN1_STRING_data(s), ASN1_STRING_length(s));
+      lua_pushlstring(L, (const char*) ASN1_STRING_get0_data(s), ASN1_STRING_length(s));
       return 1;
     }
   }
@@ -868,7 +872,7 @@ static int openssl_asn1group_toprint(lua
   unsigned long flags = luaL_optint(L, 2, 0);
   BIO* out = BIO_new(BIO_s_mem());
   BUF_MEM *mem;
-  switch (s->type)
+  switch (ASN1_STRING_type(s))
   {
   case V_ASN1_UTCTIME:
   {
@@ -909,7 +913,7 @@ static int openssl_asn1group_toutf8(lua_
 static int openssl_asn1group_dup(lua_State* L)
 {
   ASN1_STRING* s = CHECK_GROUP(1, ASN1_STRING, "openssl.asn1group");
-  openssl_push_asn1(L, s, s->type);
+  openssl_push_asn1(L, s, ASN1_STRING_type(s));
   return 1;
 }
 
@@ -1212,7 +1216,7 @@ int openssl_get_nid(lua_State*L, int idx
   else if (lua_isuserdata(L, idx))
   {
     ASN1_OBJECT* obj = CHECK_OBJECT(idx, ASN1_OBJECT, "openssl.asn1_object");
-    return obj->nid;
+    return OBJ_obj2nid(obj);
   }
   else
   {
@@ -1232,8 +1236,8 @@ int openssl_push_asn1object(lua_State* L
 int openssl_push_asn1(lua_State* L, ASN1_STRING* string, int type)
 {
   if (type == V_ASN1_UNDEF)
-    type = string->type;
-  if ((string->type & type) != type)
+    type = ASN1_STRING_type(string);
+  if ((ASN1_STRING_type(string) & type) != type)
   {
     luaL_error(L, "need asn1_string type mismatch");
     return 0;
--- a/src/bio.c
+++ b/src/bio.c
@@ -460,7 +460,12 @@ static LUA_FUNCTION(openssl_bio_pop)
   }
   else
   {
+    int i;
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+    BIO_up_ref(end);
+#else
     CRYPTO_add(&end->references, 1, CRYPTO_LOCK_BIO);
+#endif
     PUSH_OBJECT(end, "openssl.bio");
   }
   return 1;
@@ -588,8 +593,19 @@ void BIO_info_callback(BIO *bio, int cmd
   size_t p_maxlen;
   (void) argl;
   (void) argp;
+  const char* name;
+  int num, type;
   if (BIO_CB_RETURN & cmd)
     r = ret;
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+  name = BIO_method_name(bio);
+  type = BIO_method_type(bio);
+  num = BIO_get_fd(bio, NULL);
+#else
+  name = bio->method->name;
+  type = bio->method->type;
+  num = bio->num;
+#endif
 
   BIO_snprintf(buf, sizeof buf, "BIO[%08lX]:", (unsigned long)bio);
   p = &(buf[14]);
@@ -597,36 +613,36 @@ void BIO_info_callback(BIO *bio, int cmd
   switch (cmd)
   {
   case BIO_CB_FREE:
-    BIO_snprintf(p, p_maxlen, "Free - %s\n", bio->method->name);
+    BIO_snprintf(p, p_maxlen, "Free - %s\n", name);
     break;
   case BIO_CB_READ:
-    if (bio->method->type & BIO_TYPE_DESCRIPTOR)
+    if (type & BIO_TYPE_DESCRIPTOR)
       BIO_snprintf(p, p_maxlen, "read(%d,%lu) - %s fd=%d\n",
-                   bio->num, (unsigned long)argi,
-                   bio->method->name, bio->num);
+                   num, (unsigned long)argi,
+                   name, num);
     else
       BIO_snprintf(p, p_maxlen, "read(%d,%lu) - %s\n",
-                   bio->num, (unsigned long)argi,
-                   bio->method->name);
+                   num, (unsigned long)argi,
+                   name);
     break;
   case BIO_CB_WRITE:
-    if (bio->method->type & BIO_TYPE_DESCRIPTOR)
+    if (type & BIO_TYPE_DESCRIPTOR)
       BIO_snprintf(p, p_maxlen, "write(%d,%lu) - %s fd=%d\n",
-                   bio->num, (unsigned long)argi,
-                   bio->method->name, bio->num);
+                   num, (unsigned long)argi,
+                   name, num);
     else
       BIO_snprintf(p, p_maxlen, "write(%d,%lu) - %s\n",
-                   bio->num, (unsigned long)argi,
-                   bio->method->name);
+                   num, (unsigned long)argi,
+                   name);
     break;
   case BIO_CB_PUTS:
-    BIO_snprintf(p, p_maxlen, "puts() - %s\n", bio->method->name);
+    BIO_snprintf(p, p_maxlen, "puts() - %s\n", name);
     break;
   case BIO_CB_GETS:
-    BIO_snprintf(p, p_maxlen, "gets(%lu) - %s\n", (unsigned long)argi, bio->method->name);
+    BIO_snprintf(p, p_maxlen, "gets(%lu) - %s\n", (unsigned long)argi, name);
     break;
   case BIO_CB_CTRL:
-    BIO_snprintf(p, p_maxlen, "ctrl(%lu) - %s\n", (unsigned long)argi, bio->method->name);
+    BIO_snprintf(p, p_maxlen, "ctrl(%lu) - %s\n", (unsigned long)argi, name);
     break;
   case BIO_CB_RETURN|BIO_CB_READ:
     BIO_snprintf(p, p_maxlen, "read return %ld\n", ret);
@@ -648,7 +664,11 @@ void BIO_info_callback(BIO *bio, int cmd
     break;
   }
 
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+  b = (BIO *)BIO_get_callback_arg(bio);
+#else
   b = (BIO *)bio->cb_arg;
+#endif
   if (b != NULL)
     BIO_write(b, buf, strlen(buf));
 #if !defined(OPENSSL_NO_STDIO) && !defined(OPENSSL_SYS_WIN16)
