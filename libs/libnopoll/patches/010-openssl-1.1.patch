--- a/src/nopoll_conn.c
+++ b/src/nopoll_conn.c
@@ -544,7 +544,13 @@ SSL_CTX * __nopoll_conn_get_ssl_context
 		/* select a default mechanism according to what's
 		 * available, starting from the most common accepted
 		 * solution, which is TLSv1.0 */
-#if defined(NOPOLL_HAVE_TLSv10_ENABLED)
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+		/* OpenSSL 1.1 and later */
+		return SSL_CTX_new (is_client ? TLS_client_method () : TLS_server_method ());
+#elif defined(NOPOLL_HAVE_SSLv23_ENABLED)
+		/* if not use SSLv23 */
+		return SSL_CTX_new (is_client ? SSLv23_client_method () : SSLv23_server_method ());
+#elif defined(NOPOLL_HAVE_TLSv10_ENABLED)
 		/* by default use TLSv1.0 */
 		return SSL_CTX_new (is_client ? TLSv1_client_method () : TLSv1_server_method ());
 #elif defined(NOPOLL_HAVE_TLSv11_ENABLED)
@@ -553,9 +559,6 @@ SSL_CTX * __nopoll_conn_get_ssl_context
 #elif defined(NOPOLL_HAVE_TLSv12_ENABLED)
 		/* if not use TLSv1.2 */
 		return SSL_CTX_new (is_client ? TLSv1_2_client_method () : TLSv1_2_server_method ());
-#elif defined(NOPOLL_HAVE_SSLv23_ENABLED)
-		/* if not use SSLv23 */
-		return SSL_CTX_new (is_client ? SSLv23_client_method () : SSLv23_server_method ()); 
 #elif defined(NOPOLL_HAVE_SSLv3_ENABLED)
 		/* if not use SSLv3 */
 		return SSL_CTX_new (is_client ? SSLv3_client_method () : SSLv3_server_method ()); 
@@ -2219,7 +2222,7 @@ char * nopoll_conn_produce_accept_key (n
 	int             accept_key_size;
 	int             key_length;
 	unsigned char   buffer[EVP_MAX_MD_SIZE];
-	EVP_MD_CTX      mdctx;
+	EVP_MD_CTX      *mdctx;
 	const EVP_MD  * md = NULL;
 	unsigned int    md_len = EVP_MAX_MD_SIZE;
 
@@ -2236,11 +2239,17 @@ char * nopoll_conn_produce_accept_key (n
 	
 	nopoll_log (ctx, NOPOLL_LEVEL_DEBUG, "base key value: %s", accept_key);
 
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+	if ((mdctx = EVP_MD_CTX_new()) == NULL)
+#else
+	if ((mdctx = EVP_MD_CTX_create()) == NULL)
+#endif
+		return NULL;
 	/* now sha-1 */
 	md = EVP_sha1 ();
-	EVP_DigestInit (&mdctx, md);
-	EVP_DigestUpdate (&mdctx, accept_key, strlen (accept_key));
-	EVP_DigestFinal (&mdctx, buffer, &md_len);
+	EVP_DigestInit (mdctx, md);
+	EVP_DigestUpdate (mdctx, accept_key, strlen (accept_key));
+	EVP_DigestFinal (mdctx, buffer, &md_len);
 
 	nopoll_log (ctx, NOPOLL_LEVEL_DEBUG, "Sha-1 length is: %u", md_len);
 	/* now convert into base64 */
@@ -2250,6 +2259,11 @@ char * nopoll_conn_produce_accept_key (n
 	}
 
 	nopoll_log (ctx, NOPOLL_LEVEL_DEBUG, "Returning Sec-Websocket-Accept: %s", accept_key);
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+	EVP_MD_CTX_free(mdctx);
+#else
+	EVP_MD_CTX_destroy(mdctx);
+#endif
 	
 	return accept_key;
 	
