--- a/acx_nlnetlabs.m4
+++ b/acx_nlnetlabs.m4
@@ -663,16 +663,16 @@ AC_DEFUN([ACX_SSL_CHECKS], [
                 ACX_RUNTIME_PATH_ADD([$ssldir/lib])
             fi
         
-            AC_MSG_CHECKING([for HMAC_CTX_init in -lcrypto])
+            AC_MSG_CHECKING([for HMAC_Init_ex in -lcrypto])
             LIBS="$LIBS -lcrypto"
             LIBSSL_LIBS="$LIBSSL_LIBS -lcrypto"
             AC_TRY_LINK(, [
-                int HMAC_CTX_init(void);
-                (void)HMAC_CTX_init();
+                int HMAC_Init_ex(void);
+                (void)HMAC_Init_ex();
               ], [
                 AC_MSG_RESULT(yes)
                 AC_DEFINE([HAVE_HMAC_CTX_INIT], 1, 
-                          [If you have HMAC_CTX_init])
+                          [If you have HMAC_Init_ex])
               ], [
                 AC_MSG_RESULT(no)
                 # check if -lwsock32 or -lgdi32 are needed.	
@@ -682,11 +682,11 @@ AC_DEFUN([ACX_SSL_CHECKS], [
                 LIBSSL_LIBS="$LIBSSL_LIBS -lgdi32"
                 AC_MSG_CHECKING([if -lcrypto needs -lgdi32])
                 AC_TRY_LINK([], [
-                    int HMAC_CTX_init(void);
-                    (void)HMAC_CTX_init();
+                    int HMAC_Init_ex(void);
+                    (void)HMAC_Init_ex();
                   ],[
                     AC_DEFINE([HAVE_HMAC_CTX_INIT], 1, 
-                        [If you have HMAC_CTX_init])
+                        [If you have HMAC_Init_ex])
                     AC_MSG_RESULT(yes) 
                   ],[
                     AC_MSG_RESULT(no)
@@ -696,15 +696,15 @@ AC_DEFUN([ACX_SSL_CHECKS], [
                     LIBSSL_LIBS="$LIBSSL_LIBS -ldl"
                     AC_MSG_CHECKING([if -lcrypto needs -ldl])
                     AC_TRY_LINK([], [
-                        int HMAC_CTX_init(void);
-                        (void)HMAC_CTX_init();
+                        int HMAC_Init_ex(void);
+                        (void)HMAC_Init_ex();
                       ],[
                         AC_DEFINE([HAVE_HMAC_CTX_INIT], 1, 
-                            [If you have HMAC_CTX_init])
+                            [If you have HMAC_Init_ex])
                         AC_MSG_RESULT(yes) 
                       ],[
                         AC_MSG_RESULT(no)
-                    AC_MSG_ERROR([OpenSSL found in $ssldir, but version 0.9.7 or higher is required])
+                    AC_MSG_ERROR([OpenSSL found in $ssldir, but version 1.0.0 or higher is required])
                     ])
                 ])
             ])
--- a/configure
+++ b/configure
@@ -14454,8 +14454,8 @@ $as_echo "found in $ssldir" >&6; }
 
             fi
 
-            { $as_echo "$as_me:${as_lineno-$LINENO}: checking for HMAC_CTX_init in -lcrypto" >&5
-$as_echo_n "checking for HMAC_CTX_init in -lcrypto... " >&6; }
+            { $as_echo "$as_me:${as_lineno-$LINENO}: checking for HMAC_Init_ex in -lcrypto" >&5
+$as_echo_n "checking for HMAC_Init_ex in -lcrypto... " >&6; }
             LIBS="$LIBS -lcrypto"
             LIBSSL_LIBS="$LIBSSL_LIBS -lcrypto"
             cat confdefs.h - <<_ACEOF >conftest.$ac_ext
@@ -14465,8 +14465,8 @@ int
 main ()
 {
 
-                int HMAC_CTX_init(void);
-                (void)HMAC_CTX_init();
+                int HMAC_Init_ex(void);
+                (void)HMAC_Init_ex();
 
   ;
   return 0;
@@ -14498,8 +14498,8 @@ int
 main ()
 {
 
-                    int HMAC_CTX_init(void);
-                    (void)HMAC_CTX_init();
+                    int HMAC_Init_ex(void);
+                    (void)HMAC_Init_ex();
 
   ;
   return 0;
@@ -14530,8 +14530,8 @@ int
 main ()
 {
 
-                        int HMAC_CTX_init(void);
-                        (void)HMAC_CTX_init();
+                        int HMAC_Init_ex(void);
+                        (void)HMAC_Init_ex();
 
   ;
   return 0;
@@ -14549,7 +14549,7 @@ else
 
                         { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
 $as_echo "no" >&6; }
-                    as_fn_error $? "OpenSSL found in $ssldir, but version 0.9.7 or higher is required" "$LINENO" 5
+                    as_fn_error $? "OpenSSL found in $ssldir, but version 1.0.0 or higher is required" "$LINENO" 5
 
 fi
 rm -f core conftest.err conftest.$ac_objext \
--- a/dane.c
+++ b/dane.c
@@ -327,8 +327,8 @@ ldns_dane_pkix_get_last_self_signed(X509
 
 	}
 	(void) X509_verify_cert(vrfy_ctx);
-	if (vrfy_ctx->error == X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN ||
-	    vrfy_ctx->error == X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT){
+	if (X509_STORE_CTX_get_error(vrfy_ctx) == X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN ||
+	    X509_STORE_CTX_get_error(vrfy_ctx) == X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT){
 
 		*out_cert = X509_STORE_CTX_get_current_cert( vrfy_ctx);
 		s = LDNS_STATUS_OK;
--- a/dnssec.c
+++ b/dnssec.c
@@ -376,10 +376,15 @@ ldns_key_buf2dsa_raw(unsigned char* key,
 		return NULL;
 	}
 #ifndef S_SPLINT_S
+# if OPENSSL_VERSION_NUMBER >= 0x10100000L
+	DSA_set0_pqg(dsa, P, Q, G);
+	DSA_set0_key(dsa, Y, NULL);
+# else
 	dsa->p = P;
 	dsa->q = Q;
 	dsa->g = G;
 	dsa->pub_key = Y;
+# endif
 #endif /* splint */
 
 	return dsa;
@@ -444,8 +449,12 @@ ldns_key_buf2rsa_raw(unsigned char* key,
 		return NULL;
 	}
 #ifndef S_SPLINT_S
+# if OPENSSL_VERSION_NUMBER >= 0x10100000L
+	RSA_set0_key(rsa, modulus, exponent, NULL);
+# else
 	rsa->n = modulus;
 	rsa->e = exponent;
+# endif
 #endif /* splint */
 
 	return rsa;
@@ -1709,6 +1718,7 @@ ldns_convert_dsa_rrsig_asn12rdf(const ld
 {
 	ldns_rdf *sigdata_rdf;
 	DSA_SIG *dsasig;
+	const BIGNUM *r, *s;
 	unsigned char *dsasig_data = (unsigned char*)ldns_buffer_begin(sig);
 	size_t byte_offset;
 
@@ -1726,22 +1736,28 @@ ldns_convert_dsa_rrsig_asn12rdf(const ld
                 return NULL;
         }
 	dsasig_data[0] = 0;
-	byte_offset = (size_t) (20 - BN_num_bytes(dsasig->r));
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+	DSA_SIG_get0(dsasig, &r, &s);
+#else
+	r = dsasig->r;
+	s = dsasig->s;
+#endif
+	byte_offset = (size_t) (20 - BN_num_bytes(r));
 	if (byte_offset > 20) {
                 DSA_SIG_free(dsasig);
                 LDNS_FREE(dsasig_data);
 		return NULL;
 	}
 	memset(&dsasig_data[1], 0, byte_offset);
-	BN_bn2bin(dsasig->r, &dsasig_data[1 + byte_offset]);
-	byte_offset = (size_t) (20 - BN_num_bytes(dsasig->s));
+	BN_bn2bin(r, &dsasig_data[1 + byte_offset]);
+	byte_offset = (size_t) (20 - BN_num_bytes(s));
 	if (byte_offset > 20) {
                 DSA_SIG_free(dsasig);
                 LDNS_FREE(dsasig_data);
 		return NULL;
 	}
 	memset(&dsasig_data[21], 0, byte_offset);
-	BN_bn2bin(dsasig->s, &dsasig_data[21 + byte_offset]);
+	BN_bn2bin(s, &dsasig_data[21 + byte_offset]);
 
 	sigdata_rdf = ldns_rdf_new(LDNS_RDF_TYPE_B64, 41, dsasig_data);
         if(!sigdata_rdf) {
@@ -1784,8 +1800,12 @@ ldns_convert_dsa_rrsig_rdf2asn1(ldns_buf
 		return LDNS_STATUS_MEM_ERR;
 	}
 
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+	DSA_SIG_set0(dsasig, R, S);
+#else
 	dsasig->r = R;
 	dsasig->s = S;
+#endif
 
 	raw_sig_len = i2d_DSA_SIG(dsasig, &raw_sig);
 	if (raw_sig_len < 0) {
@@ -1811,20 +1831,27 @@ ldns_convert_ecdsa_rrsig_asn12rdf(const
         ECDSA_SIG* ecdsa_sig;
 	unsigned char *data = (unsigned char*)ldns_buffer_begin(sig);
         ldns_rdf* rdf;
+	const BIGNUM *r, *s;
 	ecdsa_sig = d2i_ECDSA_SIG(NULL, (const unsigned char **)&data, sig_len);
         if(!ecdsa_sig) return NULL;
 
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+	ECDSA_SIG_get0(ecdsa_sig, &r, &s);
+#else
+	r = ecdsa_sig->r;
+	s = ecdsa_sig->s;
+#endif
         /* "r | s". */
         data = LDNS_XMALLOC(unsigned char,
-                BN_num_bytes(ecdsa_sig->r) + BN_num_bytes(ecdsa_sig->s));
+                BN_num_bytes(r) + BN_num_bytes(s));
         if(!data) {
                 ECDSA_SIG_free(ecdsa_sig);
                 return NULL;
         }
-        BN_bn2bin(ecdsa_sig->r, data);
-        BN_bn2bin(ecdsa_sig->s, data+BN_num_bytes(ecdsa_sig->r));
+        BN_bn2bin(r, data);
+        BN_bn2bin(s, data+BN_num_bytes(r));
 	rdf = ldns_rdf_new(LDNS_RDF_TYPE_B64, (size_t)(
-		BN_num_bytes(ecdsa_sig->r) + BN_num_bytes(ecdsa_sig->s)), data);
+		BN_num_bytes(r) + BN_num_bytes(s)), data);
         ECDSA_SIG_free(ecdsa_sig);
         return rdf;
 }
@@ -1843,12 +1870,24 @@ ldns_convert_ecdsa_rrsig_rdf2asn1(ldns_b
         /* use the raw data to parse two evenly long BIGNUMs, "r | s". */
         sig = ECDSA_SIG_new();
         if(!sig) return LDNS_STATUS_MEM_ERR;
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+	BIGNUM *r, *s;
+
+        r = BN_bin2bn((const unsigned char*)ldns_rdf_data(sig_rdf),
+                bnsize, NULL);
+        s = BN_bin2bn((const unsigned char*)ldns_rdf_data(sig_rdf)+bnsize,
+                bnsize, NULL);
+	if (r && s) }
+		ECDSA_SIG_set0(sig, r, s);
+	} else {
+#else
         sig->r = BN_bin2bn((const unsigned char*)ldns_rdf_data(sig_rdf),
                 bnsize, sig->r);
         sig->s = BN_bin2bn((const unsigned char*)ldns_rdf_data(sig_rdf)+bnsize,
                 bnsize, sig->s);
         if(!sig->r || !sig->s) {
-                ECDSA_SIG_free(sig);
+#endif
+		ECDSA_SIG_free(sig);
                 return LDNS_STATUS_MEM_ERR;
         }
 
--- a/dnssec_sign.c
+++ b/dnssec_sign.c
@@ -127,7 +127,7 @@ ldns_sign_public_buffer(ldns_buffer *sig
 		b64rdf = ldns_sign_public_evp(
 				   sign_buf,
 				   ldns_key_evp_key(current_key),
-				   EVP_dss1());
+				   EVP_sha1());
 		break;
 	case LDNS_SIGN_RSASHA1:
 	case LDNS_SIGN_RSASHA1_NSEC3:
@@ -313,6 +313,7 @@ ldns_sign_public_dsa(ldns_buffer *to_sig
 	ldns_buffer *b64sig;
 
 	DSA_SIG *sig;
+	const BIGNUM *r, *s;
 	uint8_t *data;
 	size_t pad;
 
@@ -341,18 +342,25 @@ ldns_sign_public_dsa(ldns_buffer *to_sig
 		return NULL;
         }
 
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+	DSA_SIG_get0(sig, &r, &s);
+#else
+	r = sig->r;
+	s = sig->s;
+#endif
+
 	data[0] = 1;
-	pad = 20 - (size_t) BN_num_bytes(sig->r);
+	pad = 20 - (size_t) BN_num_bytes(r);
 	if (pad > 0) {
 		memset(data + 1, 0, pad);
 	}
-	BN_bn2bin(sig->r, (unsigned char *) (data + 1) + pad);
+	BN_bn2bin(r, (unsigned char *) (data + 1) + pad);
 
-	pad = 20 - (size_t) BN_num_bytes(sig->s);
+	pad = 20 - (size_t) BN_num_bytes(s);
 	if (pad > 0) {
 		memset(data + 1 + SHA_DIGEST_LENGTH, 0, pad);
 	}
-	BN_bn2bin(sig->s, (unsigned char *) (data + 1 + SHA_DIGEST_LENGTH + pad));
+	BN_bn2bin(s, (unsigned char *) (data + 1 + SHA_DIGEST_LENGTH + pad));
 
 	sigdata_rdf = ldns_rdf_new_frm_data(LDNS_RDF_TYPE_B64,
 								 1 + 2 * SHA_DIGEST_LENGTH,
@@ -372,7 +380,11 @@ ldns_pkey_is_ecdsa(EVP_PKEY* pkey)
 {
         EC_KEY* ec;
         const EC_GROUP* g;
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+        if(EVP_PKEY_base_id(pkey) != EVP_PKEY_EC)
+#else
         if(EVP_PKEY_type(pkey->type) != EVP_PKEY_EC)
+#endif
                 return 0;
         ec = EVP_PKEY_get1_EC_KEY(pkey);
         g = EC_KEY_get0_group(ec);
@@ -401,7 +413,7 @@ ldns_sign_public_evp(ldns_buffer *to_sig
 	unsigned int siglen;
 	ldns_rdf *sigdata_rdf;
 	ldns_buffer *b64sig;
-	EVP_MD_CTX ctx;
+	EVP_MD_CTX *ctx;
 	const EVP_MD *md_type;
 	int r;
 
@@ -418,11 +430,14 @@ ldns_sign_public_evp(ldns_buffer *to_sig
 		ldns_buffer_free(b64sig);
 		return NULL;
 	}
-
-	EVP_MD_CTX_init(&ctx);
-	r = EVP_SignInit(&ctx, md_type);
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+	ctx = EVP_MD_CTX_new();
+#else
+	ctx = EVP_MD_CTX_create();
+#endif
+	r = EVP_SignInit(ctx, md_type);
 	if(r == 1) {
-		r = EVP_SignUpdate(&ctx, (unsigned char*)
+		r = EVP_SignUpdate(ctx, (unsigned char*)
 					    ldns_buffer_begin(to_sign),
 					    ldns_buffer_position(to_sign));
 	} else {
@@ -430,7 +445,7 @@ ldns_sign_public_evp(ldns_buffer *to_sig
 		return NULL;
 	}
 	if(r == 1) {
-		r = EVP_SignFinal(&ctx, (unsigned char*)
+		r = EVP_SignFinal(ctx, (unsigned char*)
 					   ldns_buffer_begin(b64sig), &siglen, key);
 	} else {
 		ldns_buffer_free(b64sig);
@@ -443,10 +458,18 @@ ldns_sign_public_evp(ldns_buffer *to_sig
 
 	/* unfortunately, OpenSSL output is differenct from DNS DSA format */
 #ifndef S_SPLINT_S
+# if OPENSSL_VERSION_NUMBER >= 0x10100000L
+	if (EVP_PKEY_base_id(key) == EVP_PKEY_DSA) {
+# else
 	if (EVP_PKEY_type(key->type) == EVP_PKEY_DSA) {
+# endif
 		sigdata_rdf = ldns_convert_dsa_rrsig_asn12rdf(b64sig, siglen);
 #ifdef USE_ECDSA
+# if OPENSSL_VERSION_NUMBER >= 0x10100000L
+        } else if(EVP_PKEY_base_id(key) == EVP_PKEY_EC &&
+# else
         } else if(EVP_PKEY_type(key->type) == EVP_PKEY_EC &&
+# endif
                 ldns_pkey_is_ecdsa(key)) {
                 sigdata_rdf = ldns_convert_ecdsa_rrsig_asn12rdf(b64sig, siglen);
 #endif
@@ -457,7 +480,11 @@ ldns_sign_public_evp(ldns_buffer *to_sig
 	}
 #endif /* splint */
 	ldns_buffer_free(b64sig);
-	EVP_MD_CTX_cleanup(&ctx);
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+	EVP_MD_CTX_free(ctx);
+#else
+	EVP_MD_CTX_destroy(ctx);
+#endif
 	return sigdata_rdf;
 }
 
--- a/dnssec_verify.c
+++ b/dnssec_verify.c
@@ -2485,18 +2485,26 @@ ldns_status
 ldns_verify_rrsig_evp_raw(unsigned char *sig, size_t siglen, 
 					 ldns_buffer *rrset, EVP_PKEY *key, const EVP_MD *digest_type)
 {
-	EVP_MD_CTX ctx;
+	EVP_MD_CTX *ctx;
 	int res;
 
-	EVP_MD_CTX_init(&ctx);
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+	ctx = EVP_MD_CTX_new();
+#else
+	ctx = EVP_MD_CTX_create();
+#endif
 	
-	EVP_VerifyInit(&ctx, digest_type);
-	EVP_VerifyUpdate(&ctx,
+	EVP_VerifyInit(ctx, digest_type);
+	EVP_VerifyUpdate(ctx,
 				  ldns_buffer_begin(rrset),
 				  ldns_buffer_position(rrset));
-	res = EVP_VerifyFinal(&ctx, sig, (unsigned int) siglen, key);
+	res = EVP_VerifyFinal(ctx, sig, (unsigned int) siglen, key);
 	
-	EVP_MD_CTX_cleanup(&ctx);
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+	EVP_MD_CTX_free(ctx);
+#else
+	EVP_MD_CTX_destroy(ctx);
+#endif
 	
 	if (res == 1) {
 		return LDNS_STATUS_OK;
@@ -2554,7 +2562,7 @@ ldns_verify_rrsig_dsa_raw(unsigned char*
 								siglen,
 								rrset,
 								evp_key,
-								EVP_dss1());
+								EVP_sha1());
 	} else {
 		result = LDNS_STATUS_SSL_ERR;
 	}
--- a/host2str.c
+++ b/host2str.c
@@ -1955,6 +1955,8 @@ ldns_key2buffer_str(ldns_buffer *output,
 
 	if (ldns_buffer_status_ok(output)) {
 #ifdef HAVE_SSL
+		BIGNUM *n, *e, *d, *p, *q, *g, *dmp1, *dmq1, *iqmp, *pub_key, *priv_key;
+
 		switch(ldns_key_algorithm(k)) {
 			case LDNS_SIGN_RSASHA1:
 			case LDNS_SIGN_RSASHA1_NSEC3:
@@ -2011,7 +2013,21 @@ ldns_key2buffer_str(ldns_buffer *output,
 				 * print to buf */
 				ldns_buffer_printf(output, "Modulus: ");
 #ifndef S_SPLINT_S
-				i = (uint16_t)BN_bn2bin(rsa->n, bignum);
+# if OPENSSL_VERSION_NUMBER >= 0x10100000L
+				RSA_get0_key(rsa, &n, &e, &d);
+				RSA_get0_factors(rsa, &p, &q);
+				RSA_get0_crt_params(rsa, &dmp1, &dmq1, &iqmp);
+# else
+				n = rsa->n;
+				e = rsa->e;
+				d = rsa->d;
+				p = rsa->p;
+				q = rsa->q;
+				dmp1 = rsa->dmp1;
+				dmq1 = rsa->dmq1;
+				iqmp = rsa->iqmp;
+# endif
+				i = (uint16_t)BN_bn2bin(n, bignum);
 				if (i > LDNS_MAX_KEYLEN) {
 					goto error;
 				}
@@ -2023,7 +2039,7 @@ ldns_key2buffer_str(ldns_buffer *output,
 				ldns_rdf_deep_free(b64_bignum);
 				ldns_buffer_printf(output, "\n");
 				ldns_buffer_printf(output, "PublicExponent: ");
-				i = (uint16_t)BN_bn2bin(rsa->e, bignum);
+				i = (uint16_t)BN_bn2bin(e, bignum);
 				if (i > LDNS_MAX_KEYLEN) {
 					goto error;
 				}
@@ -2036,8 +2052,8 @@ ldns_key2buffer_str(ldns_buffer *output,
 				ldns_buffer_printf(output, "\n");
 
 				ldns_buffer_printf(output, "PrivateExponent: ");
-				if (rsa->d) {
-					i = (uint16_t)BN_bn2bin(rsa->d, bignum);
+				if (d) {
+					i = (uint16_t)BN_bn2bin(d, bignum);
 					if (i > LDNS_MAX_KEYLEN) {
 						goto error;
 					}
@@ -2053,8 +2069,8 @@ ldns_key2buffer_str(ldns_buffer *output,
 				}
 
 				ldns_buffer_printf(output, "Prime1: ");
-				if (rsa->p) {
-					i = (uint16_t)BN_bn2bin(rsa->p, bignum);
+				if (p) {
+					i = (uint16_t)BN_bn2bin(p, bignum);
 					if (i > LDNS_MAX_KEYLEN) {
 						goto error;
 					}
@@ -2070,8 +2086,8 @@ ldns_key2buffer_str(ldns_buffer *output,
 				}
 
 				ldns_buffer_printf(output, "Prime2: ");
-				if (rsa->q) {
-					i = (uint16_t)BN_bn2bin(rsa->q, bignum);
+				if (q) {
+					i = (uint16_t)BN_bn2bin(q, bignum);
 					if (i > LDNS_MAX_KEYLEN) {
 						goto error;
 					}
@@ -2087,8 +2103,8 @@ ldns_key2buffer_str(ldns_buffer *output,
 				}
 
 				ldns_buffer_printf(output, "Exponent1: ");
-				if (rsa->dmp1) {
-					i = (uint16_t)BN_bn2bin(rsa->dmp1, bignum);
+				if (dmp1) {
+					i = (uint16_t)BN_bn2bin(dmp1, bignum);
 					if (i > LDNS_MAX_KEYLEN) {
 						goto error;
 					}
@@ -2104,8 +2120,8 @@ ldns_key2buffer_str(ldns_buffer *output,
 				}
 
 				ldns_buffer_printf(output, "Exponent2: ");
-				if (rsa->dmq1) {
-					i = (uint16_t)BN_bn2bin(rsa->dmq1, bignum);
+				if (dmq1) {
+					i = (uint16_t)BN_bn2bin(dmq1, bignum);
 					if (i > LDNS_MAX_KEYLEN) {
 						goto error;
 					}
@@ -2121,8 +2137,8 @@ ldns_key2buffer_str(ldns_buffer *output,
 				}
 
 				ldns_buffer_printf(output, "Coefficient: ");
-				if (rsa->iqmp) {
-					i = (uint16_t)BN_bn2bin(rsa->iqmp, bignum);
+				if (iqmp) {
+					i = (uint16_t)BN_bn2bin(iqmp, bignum);
 					if (i > LDNS_MAX_KEYLEN) {
 						goto error;
 					}
@@ -2155,8 +2171,18 @@ ldns_key2buffer_str(ldns_buffer *output,
 				 * print to buf */
 				ldns_buffer_printf(output, "Prime(p): ");
 #ifndef S_SPLINT_S
-				if (dsa->p) {
-					i = (uint16_t)BN_bn2bin(dsa->p, bignum);
+# if OPENSSL_VERSION_NUMBER >= 0x10100000L
+				DSA_get0_pqg(dsa, &p, &q, &g);
+				DSA_get0_key(dsa, &pub_key, &priv_key);
+# else
+				p = dsa->p;
+				q = dsa->q;
+				g = dsa->g;
+				pub_key = dsa->pub_key;
+				priv_key = dsa->priv_key;
+# endif
+				if (p) {
+					i = (uint16_t)BN_bn2bin(p, bignum);
 					if (i > LDNS_MAX_KEYLEN) {
 						goto error;
 					}
@@ -2172,8 +2198,8 @@ ldns_key2buffer_str(ldns_buffer *output,
 				}
 
 				ldns_buffer_printf(output, "Subprime(q): ");
-				if (dsa->q) {
-					i = (uint16_t)BN_bn2bin(dsa->q, bignum);
+				if (q) {
+					i = (uint16_t)BN_bn2bin(q, bignum);
 					if (i > LDNS_MAX_KEYLEN) {
 						goto error;
 					}
@@ -2189,8 +2215,8 @@ ldns_key2buffer_str(ldns_buffer *output,
 				}
 
 				ldns_buffer_printf(output, "Base(g): ");
-				if (dsa->g) {
-					i = (uint16_t)BN_bn2bin(dsa->g, bignum);
+				if (g) {
+					i = (uint16_t)BN_bn2bin(g, bignum);
 					if (i > LDNS_MAX_KEYLEN) {
 						goto error;
 					}
@@ -2206,8 +2232,8 @@ ldns_key2buffer_str(ldns_buffer *output,
 				}
 
 				ldns_buffer_printf(output, "Private_value(x): ");
-				if (dsa->priv_key) {
-					i = (uint16_t)BN_bn2bin(dsa->priv_key, bignum);
+				if (priv_key) {
+					i = (uint16_t)BN_bn2bin(priv_key, bignum);
 					if (i > LDNS_MAX_KEYLEN) {
 						goto error;
 					}
@@ -2223,8 +2249,8 @@ ldns_key2buffer_str(ldns_buffer *output,
 				}
 
 				ldns_buffer_printf(output, "Public_value(y): ");
-				if (dsa->pub_key) {
-					i = (uint16_t)BN_bn2bin(dsa->pub_key, bignum);
+				if (pub_key) {
+					i = (uint16_t)BN_bn2bin(pub_key, bignum);
 					if (i > LDNS_MAX_KEYLEN) {
 						goto error;
 					}
--- a/keys.c
+++ b/keys.c
@@ -556,6 +556,7 @@ ldns_key_new_frm_fp_rsa_l(FILE *f, int *
 	RSA *rsa;
 	uint8_t *buf;
 	int i;
+	BIGNUM *N, *E, *D, *p, *q, *dmp1, *dmq1, *iqmp;
 
 	d = LDNS_XMALLOC(char, LDNS_MAX_LINELEN);
 	buf = LDNS_XMALLOC(uint8_t, LDNS_MAX_LINELEN);
@@ -568,86 +569,100 @@ ldns_key_new_frm_fp_rsa_l(FILE *f, int *
 	 * allthough this also looks tedious
 	 */
 
-	/* Modules, rsa->n */
+	/* Modules, n */
 	if (ldns_fget_keyword_data_l(f, "Modulus", ": ", d, "\n", LDNS_MAX_LINELEN, line_nr) == -1) {
 		goto error;
 	}
 	i = ldns_b64_pton((const char*)d, buf, ldns_b64_ntop_calculate_size(strlen(d)));
 #ifndef S_SPLINT_S
-	rsa->n = BN_bin2bn((const char unsigned*)buf, i, NULL);
-	if (!rsa->n) {
+	N = BN_bin2bn((const char unsigned*)buf, i, NULL);
+	if (!N) {
 		goto error;
 	}
 
-	/* PublicExponent, rsa->e */
+	/* PublicExponent, e */
 	if (ldns_fget_keyword_data_l(f, "PublicExponent", ": ", d, "\n", LDNS_MAX_LINELEN, line_nr) == -1) {
 		goto error;
 	}
 	i = ldns_b64_pton((const char*)d, buf, ldns_b64_ntop_calculate_size(strlen(d)));
-	rsa->e = BN_bin2bn((const char unsigned*)buf, i, NULL);
-	if (!rsa->e) {
+	E = BN_bin2bn((const char unsigned*)buf, i, NULL);
+	if (!E) {
 		goto error;
 	}
 
-	/* PrivateExponent, rsa->d */
+	/* PrivateExponent, d */
 	if (ldns_fget_keyword_data_l(f, "PrivateExponent", ": ", d, "\n", LDNS_MAX_LINELEN, line_nr) == -1) {
 		goto error;
 	}
 	i = ldns_b64_pton((const char*)d, buf, ldns_b64_ntop_calculate_size(strlen(d)));
-	rsa->d = BN_bin2bn((const char unsigned*)buf, i, NULL);
-	if (!rsa->d) {
+	D = BN_bin2bn((const char unsigned*)buf, i, NULL);
+	if (!D) {
 		goto error;
 	}
 
-	/* Prime1, rsa->p */
+	/* Prime1, p */
 	if (ldns_fget_keyword_data_l(f, "Prime1", ": ", d, "\n", LDNS_MAX_LINELEN, line_nr) == -1) {
 		goto error;
 	}
 	i = ldns_b64_pton((const char*)d, buf, ldns_b64_ntop_calculate_size(strlen(d)));
-	rsa->p = BN_bin2bn((const char unsigned*)buf, i, NULL);
-	if (!rsa->p) {
+	p = BN_bin2bn((const char unsigned*)buf, i, NULL);
+	if (!p) {
 		goto error;
 	}
 
-	/* Prime2, rsa->q */
+	/* Prime2, q */
 	if (ldns_fget_keyword_data_l(f, "Prime2", ": ", d, "\n", LDNS_MAX_LINELEN, line_nr) == -1) {
 		goto error;
 	}
 	i = ldns_b64_pton((const char*)d, buf, ldns_b64_ntop_calculate_size(strlen(d)));
-	rsa->q = BN_bin2bn((const char unsigned*)buf, i, NULL);
-	if (!rsa->q) {
+	q = BN_bin2bn((const char unsigned*)buf, i, NULL);
+	if (!q) {
 		goto error;
 	}
 
-	/* Exponent1, rsa->dmp1 */
+	/* Exponent1, dmp1 */
 	if (ldns_fget_keyword_data_l(f, "Exponent1", ": ", d, "\n", LDNS_MAX_LINELEN, line_nr) == -1) {
 		goto error;
 	}
 	i = ldns_b64_pton((const char*)d, buf, ldns_b64_ntop_calculate_size(strlen(d)));
-	rsa->dmp1 = BN_bin2bn((const char unsigned*)buf, i, NULL);
-	if (!rsa->dmp1) {
+	dmp1 = BN_bin2bn((const char unsigned*)buf, i, NULL);
+	if (!dmp1) {
 		goto error;
 	}
 
-	/* Exponent2, rsa->dmq1 */
+	/* Exponent2, dmq1 */
 	if (ldns_fget_keyword_data_l(f, "Exponent2", ": ", d, "\n", LDNS_MAX_LINELEN, line_nr) == -1) {
 		goto error;
 	}
 	i = ldns_b64_pton((const char*)d, buf, ldns_b64_ntop_calculate_size(strlen(d)));
-	rsa->dmq1 = BN_bin2bn((const char unsigned*)buf, i, NULL);
-	if (!rsa->dmq1) {
+	dmq1 = BN_bin2bn((const char unsigned*)buf, i, NULL);
+	if (!dmq1) {
 		goto error;
 	}
 
-	/* Coefficient, rsa->iqmp */
+	/* Coefficient, iqmp */
 	if (ldns_fget_keyword_data_l(f, "Coefficient", ": ", d, "\n", LDNS_MAX_LINELEN, line_nr) == -1) {
 		goto error;
 	}
 	i = ldns_b64_pton((const char*)d, buf, ldns_b64_ntop_calculate_size(strlen(d)));
-	rsa->iqmp = BN_bin2bn((const char unsigned*)buf, i, NULL);
-	if (!rsa->iqmp) {
+	iqmp = BN_bin2bn((const char unsigned*)buf, i, NULL);
+	if (!iqmp) {
 		goto error;
 	}
+# if OPENSSL_VERSION_NUMBER >= 0x10100000L
+	RSA_set0_key(rsa, N, E, D);
+	RSA_set0_factors(rsa, p, q);
+	RSA_set0_crt_params(rsa, dmp1, dmq1, iqmp);
+# else
+	rsa->n = N;
+	rsa->e = E;
+	rsa->d = D;
+	rsa->p = p;
+	rsa->q = q;
+	rsa->dmp1 = dmp1;
+	rsa->dmq1 = dmq1;
+	rsa->iqmp = iqmp;
+# endif
 #endif /* splint */
 
 	LDNS_FREE(buf);
@@ -674,6 +689,7 @@ ldns_key_new_frm_fp_dsa_l(FILE *f, ATTR_
 	char *d;
 	DSA *dsa;
 	uint8_t *buf;
+	BIGNUM *p, *q, *g, *pub_key, *priv_key;
 
 	d = LDNS_XMALLOC(char, LDNS_MAX_LINELEN);
 	buf = LDNS_XMALLOC(uint8_t, LDNS_MAX_LINELEN);
@@ -690,8 +706,8 @@ ldns_key_new_frm_fp_dsa_l(FILE *f, ATTR_
 	}
 	i = ldns_b64_pton((const char*)d, buf, ldns_b64_ntop_calculate_size(strlen(d)));
 #ifndef S_SPLINT_S
-	dsa->p = BN_bin2bn((const char unsigned*)buf, i, NULL);
-	if (!dsa->p) {
+	p = BN_bin2bn((const char unsigned*)buf, i, NULL);
+	if (!p) {
 		goto error;
 	}
 
@@ -700,8 +716,8 @@ ldns_key_new_frm_fp_dsa_l(FILE *f, ATTR_
 		goto error;
 	}
 	i = ldns_b64_pton((const char*)d, buf, ldns_b64_ntop_calculate_size(strlen(d)));
-	dsa->q = BN_bin2bn((const char unsigned*)buf, i, NULL);
-	if (!dsa->q) {
+	q = BN_bin2bn((const char unsigned*)buf, i, NULL);
+	if (!q) {
 		goto error;
 	}
 
@@ -710,8 +726,8 @@ ldns_key_new_frm_fp_dsa_l(FILE *f, ATTR_
 		goto error;
 	}
 	i = ldns_b64_pton((const char*)d, buf, ldns_b64_ntop_calculate_size(strlen(d)));
-	dsa->g = BN_bin2bn((const char unsigned*)buf, i, NULL);
-	if (!dsa->g) {
+	g = BN_bin2bn((const char unsigned*)buf, i, NULL);
+	if (!g) {
 		goto error;
 	}
 
@@ -720,8 +736,8 @@ ldns_key_new_frm_fp_dsa_l(FILE *f, ATTR_
 		goto error;
 	}
 	i = ldns_b64_pton((const char*)d, buf, ldns_b64_ntop_calculate_size(strlen(d)));
-	dsa->priv_key = BN_bin2bn((const char unsigned*)buf, i, NULL);
-	if (!dsa->priv_key) {
+	priv_key = BN_bin2bn((const char unsigned*)buf, i, NULL);
+	if (!priv_key) {
 		goto error;
 	}
 
@@ -730,10 +746,20 @@ ldns_key_new_frm_fp_dsa_l(FILE *f, ATTR_
 		goto error;
 	}
 	i = ldns_b64_pton((const char*)d, buf, ldns_b64_ntop_calculate_size(strlen(d)));
-	dsa->pub_key = BN_bin2bn((const char unsigned*)buf, i, NULL);
-	if (!dsa->pub_key) {
+	pub_key = BN_bin2bn((const char unsigned*)buf, i, NULL);
+	if (!pub_key) {
 		goto error;
 	}
+# if OPENSSL_VERSION_NUMBER >= 0x10100000L
+	DSA_set0_pqg(dsa, p, q, g);
+	DSA_set0_key(dsa, pub_key, priv_key);
+# else
+	dsa->p = p;
+	dsa->q = q;
+	dsa->g = g;
+	dsa->pub_key = pub_key;
+	dsa->priv_key = priv_key;
+# endif
 #endif /* splint */
 
 	LDNS_FREE(buf);
@@ -822,6 +848,7 @@ ldns_key_new_frm_algorithm(ldns_signing_
 #ifdef HAVE_SSL
 	DSA *d;
 	RSA *r;
+	BIGNUM *e;
 #  ifdef USE_ECDSA
         EC_KEY *ec = NULL;
 #  endif
@@ -842,8 +869,17 @@ ldns_key_new_frm_algorithm(ldns_signing_
 		case LDNS_SIGN_RSASHA256:
 		case LDNS_SIGN_RSASHA512:
 #ifdef HAVE_SSL
-			r = RSA_generate_key((int)size, RSA_F4, NULL, NULL);
-                        if(!r) {
+			e = BN_new();
+			r = RSA_new();
+			if(!BN_set_word(e, RSA_F4)) {
+				RSA_free(r);
+				BN_free(e);
+				ldns_key_free(k);
+				return NULL;
+			}
+                        if(!RSA_generate_key_ex(r, (int)size, e, NULL)) {
+				RSA_free(r);
+				BN_free(e);
 				ldns_key_free(k);
 				return NULL;
 			}
@@ -858,8 +894,8 @@ ldns_key_new_frm_algorithm(ldns_signing_
 		case LDNS_SIGN_DSA:
 		case LDNS_SIGN_DSA_NSEC3:
 #ifdef HAVE_SSL
-			d = DSA_generate_parameters((int)size, NULL, 0, NULL, NULL, NULL, NULL);
-			if (!d) {
+			d = DSA_new();
+			if (!DSA_generate_parameters_ex(d, (int)size, NULL, 0, NULL, NULL, NULL)) {
 				ldns_key_free(k);
 				return NULL;
 			}
@@ -1284,27 +1320,33 @@ static bool
 ldns_key_rsa2bin(unsigned char *data, RSA *k, uint16_t *size)
 {
 	int i,j;
+	const BIGNUM *n, *e;
 	
 	if (!k) {
 		return false;
 	}
-	
-	if (BN_num_bytes(k->e) <= 256) {
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+	RSA_get0_key(k, &n, &e, NULL);
+#else
+	n = k->n;
+	e = k->e;
+#endif
+	if (BN_num_bytes(e) <= 256) {
 		/* normally only this path is executed (small factors are
 		 * more common 
 		 */
-		data[0] = (unsigned char) BN_num_bytes(k->e);
-		i = BN_bn2bin(k->e, data + 1);  
-		j = BN_bn2bin(k->n, data + i + 1);
+		data[0] = (unsigned char) BN_num_bytes(e);
+		i = BN_bn2bin(e, data + 1);  
+		j = BN_bn2bin(n, data + i + 1);
 		*size = (uint16_t) i + j;
-	} else if (BN_num_bytes(k->e) <= 65536) {
+	} else if (BN_num_bytes(e) <= 65536) {
 		data[0] = 0;
 		/* BN_bn2bin does bigendian, _uint16 also */
-		ldns_write_uint16(data + 1, (uint16_t) BN_num_bytes(k->e)); 
+		ldns_write_uint16(data + 1, (uint16_t) BN_num_bytes(e)); 
 
-		BN_bn2bin(k->e, data + 3); 
-		BN_bn2bin(k->n, data + 4 + BN_num_bytes(k->e));
-		*size = (uint16_t) BN_num_bytes(k->n) + 6;
+		BN_bn2bin(e, data + 3); 
+		BN_bn2bin(n, data + 4 + BN_num_bytes(e));
+		*size = (uint16_t) BN_num_bytes(n) + 6;
 	} else {
 		return false;
 	}
@@ -1316,13 +1358,23 @@ static bool
 ldns_key_dsa2bin(unsigned char *data, DSA *k, uint16_t *size)
 {
 	uint8_t T;
+	const BIGNUM *p, *q, *g, *pub_key;
 
 	if (!k) {
 		return false;
 	}
 	
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+	DSA_get0_pqg(k, &p, &q, &g);
+	DSA_get0_key(k, &pub_key, NULL);
+#else
+	p = k->p;
+	q = k->q;
+	g = k->g;
+	pub_key = k->pub_key;
+#endif
 	/* See RFC2536 */
-	*size = (uint16_t)BN_num_bytes(k->p);
+	*size = (uint16_t)BN_num_bytes(p);
 	T = (*size - 64) / 8;
 	memcpy(data, &T, 1);
 
@@ -1336,10 +1388,10 @@ ldns_key_dsa2bin(unsigned char *data, DS
 
 	/* size = 64 + (T * 8); */
 	data[0] = (unsigned char)T;
-	BN_bn2bin(k->q, data + 1 ); 		/* 20 octects */
-	BN_bn2bin(k->p, data + 21 ); 		/* offset octects */
-	BN_bn2bin(k->g, data + 21 + *size); 	/* offset octets */
-	BN_bn2bin(k->pub_key, data + 21 + *size + *size); /* offset octets */
+	BN_bn2bin(q, data + 1 ); 		/* 20 octects */
+	BN_bn2bin(p, data + 21 ); 		/* offset octects */
+	BN_bn2bin(g, data + 21 + *size); 	/* offset octets */
+	BN_bn2bin(pub_key, data + 21 + *size + *size); /* offset octets */
 	*size = 21 + (*size * 3);
 	return true;
 }
